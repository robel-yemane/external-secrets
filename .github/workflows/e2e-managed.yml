# Run secret-dependent e2e tests only after /ok-to-test-managed approval
on:
  repository_dispatch:
    types: [ok-to-test-managed-command]

permissions:
  id-token: write
  contents: read

name: managed e2e tests

jobs:
  integration-managed:
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch'

    steps:

    # Check out merge commit
    - name: Fork based /ok-to-test-managed checkout
      uses: actions/checkout@v3
      with:
        ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

    - name: Fetch History
      run: git fetch --prune --unshallow

    - uses: ./.github/actions/e2e-managed
      with:
        GCP_SM_SA_JSON: ${{ secrets.GCP_SM_SA_JSON}}
        GCP_GKE_ZONE: ${{ secrets.GCP_GKE_ZONE}}
        GCP_GSA_NAME: ${{ secrets.GCP_GSA_NAME}}
        GCP_KSA_NAME: ${{ secrets.GCP_KSA_NAME}}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID}}
        GCP_SM_SA_GKE_JSON: ${{ secrets.GCP_SM_SA_GKE_JSON}}

        AWS_SA_NAME: ${{ secrets.AWS_SA_NAME }}
        AWS_SA_NAMESPACE: ${{ secrets.AWS_SA_NAMESPACE }}
        AWS_OIDC_ROLE_ARN: ${{ secrets.AWS_OIDC_ROLE_ARN}}

        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID}}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET}}
        TENANT_ID: ${{ secrets.TENANT_ID}}
        VAULT_URL: ${{ secrets.VAULT_URL}}

        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_PR_NUMBER: ${{ github.event.client_payload.pull_request.number }}
        CLOUD_PROVIDER: ${{ github.event.client_payload.slash_command.args.named.provider }}
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
        GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}

